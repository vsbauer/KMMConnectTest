<?xml version="1.0" encoding="UTF-8"?>
<issues format="6" by="lint 7.3.1" type="baseline" client="gradle" dependencies="false" name="AGP (7.3.1)" variant="all" version="7.3.1">

    <issue
        id="LintError"
        message="Unexpected failure during lint analysis of Platform.kt (this is a bug in lint or one of the libraries it depends on)&#xA;&#xA;Message: () -> kotlin.String&#xA;Stack: `IllegalStateException:KtLightClassForFacadeImpl$Companion.createForFacadeNoCache(KtLightClassForFacadeImpl.kt:272)←FacadeCache$FacadeCacheData$cache$1.createValue(FacadeCache.kt:30)←FacadeCache$FacadeCacheData$cache$1.createValue(FacadeCache.kt:28)←SLRUCache.get(SLRUCache.java:47)←FacadeCache.get(FacadeCache.kt:47)←KtLightClassForFacadeImpl$Companion.createForFacade(KtLightClassForFacadeImpl.kt:282)←CliKotlinAsJavaSupport.getFacadeClassesInPackage(CliKotlinAsJavaSupport.kt:40)←LightClassUtilsKt.findFacadeClass(lightClassUtils.kt:47)←KotlinUFile$classes$2.invoke(KotlinUFile.kt:57)←KotlinUFile$classes$2.invoke(KotlinUFile.kt:56)←SynchronizedLazyImpl.getValue(LazyJVM.kt:74)←KotlinUFile.getClasses(KotlinUFile.kt:56)←UFile$DefaultImpls.accept(UFile.kt:87)←KotlinUFile.accept(KotlinUFile.kt:14)←UastLintUtilsKt.acceptSourceFile(UastLintUtils.kt:515)←UElementVisitor$visitFile$2.run(UElementVisitor.kt:261)←LintClient.runReadAction(LintClient.kt:1775)←LintDriver$LintClientWrapper.runReadAction(LintDriver.kt:2757)←UElementVisitor.visitFile(UElementVisitor.kt:259)←LintDriver$visitUastDetectors$1.run(LintDriver.kt:2073)←LintClient.runReadAction(LintClient.kt:1775)←LintDriver$LintClientWrapper.runReadAction(LintDriver.kt:2757)←LintDriver.visitUastDetectors(LintDriver.kt:2073)←LintDriver.visitUast(LintDriver.kt:2032)←LintDriver.runFileDetectors(LintDriver.kt:1421)←LintDriver.checkProject(LintDriver.kt:1185)←LintDriver.checkProjectRoot(LintDriver.kt:645)←LintDriver.access$checkProjectRoot(LintDriver.kt:158)←LintDriver$analyzeOnly$1.invoke(LintDriver.kt:459)←LintDriver$analyzeOnly$1.invoke(LintDriver.kt:452)←LintDriver.doAnalyze(LintDriver.kt:519)←LintDriver.analyzeOnly(LintDriver.kt:452)←LintCliClient$analyzeOnly$1.invoke(LintCliClient.kt:247)←LintCliClient$analyzeOnly$1.invoke(LintCliClient.kt:247)←LintCliClient.run(LintCliClient.kt:289)←LintCliClient.run$default(LintCliClient.kt:272)←LintCliClient.analyzeOnly(LintCliClient.kt:247)←Main.run(Main.java:1675)←Main.run(Main.java:281)←NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)←NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)←DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)←Method.invoke(Method.java:566)←AndroidLintWorkAction.invokeLintMainRunMethod(AndroidLintWorkAction.kt:99)←AndroidLintWorkAction.runLint(AndroidLintWorkAction.kt:88)←AndroidLintWorkAction.execute(AndroidLintWorkAction.kt:65)←DefaultWorkerServer.execute(DefaultWorkerServer.java:63)←NoIsolationWorkerFactory$1$1.create(NoIsolationWorkerFactory.java:66)←NoIsolationWorkerFactory$1$1.create(NoIsolationWorkerFactory.java:62)←ClassLoaderUtils.executeInClassloader(ClassLoaderUtils.java:97)←NoIsolationWorkerFactory$1.lambda$execute$0(NoIsolationWorkerFactory.java:62)←AbstractWorker$1.call(AbstractWorker.java:44)←AbstractWorker$1.call(AbstractWorker.java:41)←DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:204)←DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:199)←DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:66)←DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:59)←DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:157)←DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:59)←DefaultBuildOperationRunner.call(DefaultBuildOperationRunner.java:53)←DefaultBuildOperationExecutor.call(DefaultBuildOperationExecutor.java:73)←AbstractWorker.executeWrappedInBuildOperation(AbstractWorker.java:41)←NoIsolationWorkerFactory$1.execute(NoIsolationWorkerFactory.java:59)←DefaultWorkerExecutor.lambda$submitWork$2(DefaultWorkerExecutor.java:205)←FutureTask.run(FutureTask.java:264)←DefaultConditionalExecutionQueue$ExecutionRunner.runExecution(DefaultConditionalExecutionQueue.java:187)←DefaultConditionalExecutionQueue$ExecutionRunner.access$700(DefaultConditionalExecutionQueue.java:120)←DefaultConditionalExecutionQueue$ExecutionRunner$1.run(DefaultConditionalExecutionQueue.java:162)←Factories$1.create(Factories.java:31)←DefaultWorkerLeaseService.withLocks(DefaultWorkerLeaseService.java:270)←DefaultWorkerLeaseService.runAsWorkerThread(DefaultWorkerLeaseService.java:119)←DefaultWorkerLeaseService.runAsWorkerThread(DefaultWorkerLeaseService.java:124)←DefaultConditionalExecutionQueue$ExecutionRunner.runBatch(DefaultConditionalExecutionQueue.java:157)←DefaultConditionalExecutionQueue$ExecutionRunner.run(DefaultConditionalExecutionQueue.java:126)←Executors$RunnableAdapter.call(Executors.java:515)←FutureTask.run(FutureTask.java:264)←ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:64)←ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:48)←ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)←ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)←Thread.run(Thread.java:829)`&#xA;&#xA;You can run with --stacktrace or set environment variable `LINT_PRINT_STACKTRACE=true` to dump a full stacktrace to stdout.">
        <location
            file="src/androidMain/kotlin/Platform.kt"/>
    </issue>

</issues>
